openapi: 3.0.1
info:
  title: User-service API
  version: 1.0.0
  description: API para gestionar los usuarios del sistema
servers:
  - url: http://localhost:8080/api
paths:
  /artist/public/{artistUserName}:
    get:
      tags:
        - Artistas
      summary: Recupera la información pública de un artista a partir de su nombre de usuario.
      parameters:
        - name: artistUserName
          in: path
          required: true
          description: Nombre de usuario del artista.
          schema:
            type: string
      responses:
        '200':
          description: Informacion pública del artista recuperada con éxito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SentArtistDTO'
        '404':
          description: Artista {artistUserName} no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: 
                error: "Not Found"
                message: "Artista no encontrado"
                statusCode: 404
                timestamp: "2025-10-01T12:03:00Z"
                
  /artist/public:
    get:
      tags:
        - Artistas
      summary: Recupera una página de artistas filtrados
      description: Recupera una página de artistas filtrados opcionalmente por nombre y/o género musical. Soporta paginación mediante los parámetros `page` y `size`.
      parameters:
        - in: query
          name: name
          schema:
           type: string
          required: false
          description: Nombre parcial del artista para filtrar.
          example: "adam"
        - in: query
          name: genres
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GenreType'
          style: form
          explode: false
          required: false
          description: Conjunto de géneros para filtrar artistas
          example: [ HIP_HOP, RAP ]
        - in: query
          name: page
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Número de páginas solicitadas (empezando en 0)
          example: 0
        - in: query
          name: size
          schema:
            type: integer
            minimum: 1
            default: 10
          description: Tamaño de la página
          example: 10
      responses:
        '200':
          description: Página de artistas coincidentes recuperadas con éxito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageSentArtistDTO'
        '404':
          description: No hay artistas que coinciden con la selección de búsqueda
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Not Found"
                message: "No hay artistas que coinciden con la selección de búsqueda"
                statusCode: 404
                timestamp: "2025-10-01T12:02:00Z"
                
  /artist/payment-info:
    get:
      tags:
        - Artistas
      summary: Obtiene toda la información financiera de un artista autenticado.
      description: Devuelve los balances, pagos y otra información financiera del artista autenticado. 
        Requiere autenticación.
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Información financiera del artista recuperada con éxito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistPayementInfoDTO'
        '401':
          description: No tienes permisos para obtener la información financiera del artista
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "unauthorized"
                message: "No tienes permisos para obtener la información financiera del artista"
                statusCode: 401
                timestamp: "2025-10-01T12:00:00Z"
          
  /artist/public/trending:
    get:
      tags:
        - Artistas
      summary: Recupera una lista de los artistas en tendencia
      description: Devuelve una lista de los artistas más populares marcados como "trending".
      responses:
        '200':
          description: Lista de artistas en tendencia recuperada con éxito
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SentArtistDTO'
        '404':
          description: No existe por el momento ningún artista en tendencia
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Not Found"
                message: "No existe por el momento ningún artista en tendencia"
                statusCode: 404
                timestamp: "2025-10-01T11:59:00Z"

  /artist/{id}/restauracion:
    patch:  
      tags:
        - Artistas
      summary: Restaura a un artista previamente eliminado de forma lógica
      description: Restaura a un artista previamente eliminado de forma lógica. Requiere que el usuario autenticado sea el dueño de la cuenta de artista.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
            example: 4
          
      responses:
        '200':
          description: Artista restaurado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessfulResponseDTO'
        '400':
          description: El artista no está eliminado
        '401':
          description: No está permitido que restaures a un artista
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "unauthorized"
                message: "No tienes permitido restaurar a un artista"
                statusCode: 401
                timestamp: "2025-10-01T14:41:00"              
          
  /artist:
    patch:
      tags:
        - Artistas
      summary: Actualiza los datos de un artista autenticado
      description: Permite que un artista autenticado actualice su información.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArtistDTO'
      responses:
        '200':
          description: Artista actualizado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessfulResponseDTO'
        '401':
          description: No tienes permisos para actualizar a un artista
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: unauthorized
                message: No tienes permitido actualizar a un artista
                statusCode: 401
                timestamp: "2025-10-01T14:41:00"
    delete:
      tags:
        - Artistas
      summary: Realiza un borrado lógico de un artista autenticado
      description: Realiza un borrado lógico de un artista autenticado junto con toda su información.El artista y sus canciones/álbumes aparecen borrados pero no se han eliminado de manera física.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Artista borrado de forma existosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessfulResponseDTO'
        '400':
          description: Mala petición - Artista ya borrado o operación inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Bad Request"
                message: "Artista ya borrado o operación inválida"
                statusCode: 400
                timestamp: "2025-10-01T11:55:00Z"
        '401':
          description: Sin autorizacion - No tienes permisos para borrar a un artista
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "unauthorized"
                message: "No tienes permitido borrar a un artista"
                statusCode: 401
                timestamp: "2025-10-01T14:41:00"
                    
    post:
      tags:
        - Artistas
      summary: Convierte un usuario en artista
      description: Convierte un usuario autentificado en un artista con datos incluidos. Si el usuario ya está registrado como artista se manejara un error de contenido.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArtistFormDTO'
      responses:
        '200':
          description: El usuario ha sido existosamente convertido a artista
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessfulResponseDTO'
        '401':
          description: Sin autorizacion - No tienes permisos para convertir un usuario a artista
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "unauthorized"
                message: "No tienes permitido convertir un usuario a artista"
                statusCode: 401
                timestamp: "2025-10-01T14:41:00"
              
  

  /users/{username}:
    get:
      tags:
        - Usuarios
      summary: Obtiene los datos del usuario con el nombre solicitado
      description: |
        Consulta para verificar si ya existe un usuario con el mismo nombre de usuario.  
        Se utiliza para verificar la existencia de un nombre de usuario duplicado durante el proceso de registro.
        
        **Nota**: Este endpoint está diseñado para comunicación entre microservicios  y requiere de una API key válida.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: username
          in: path
          required: true
          description: El nombre de usuario que se desea consultar
          schema:
            type: string
            example: "juanM12"
            
      responses:
        '200':
          description: Autenticación exitosa. Devuelve los datos del usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileDTO'
              example:
                name: "jhon"
                surname: "brown"
                username: "jhon1342"
                email: "jhonbrown@gmail.com"
                password: "jdk1234*4" 
        '400':
          description: Parámetros inválidos o faltantes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Bad request - Parámetros faltantes"
                message: "Los parámetros 'username, API_KEY' son requeridos"
                status: 400
                timestamp: "2025-10-06T19:13:00Z" 
        '401':   
          description: Autenticación fallida - Username inválido o API key no autorizada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                invalidCredentials:
                  error: "Unauthorized"
                  message: "Credenciales no válidas"
                  statusCode: 401
                  timestamp: "2025-10-06T18:34:00Z"
                invalidApiKey:
                  error: "Unauthorized"
                  message: "API key inválida"
                  statusCode: 401
                  timestamp: "2025-10-06T19:14:00Z"   
                  
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Internal Server Error"
                message: "Error interno del servidor"
                statusCode: 500
                timestamp: "2025-10-06T18:41:00Z"  

  /users/login/acceso:         
    get:
      tags:
        - Usuarios
      summary: Obtiene los usuarios que coincidan con el correo y contraseña
      description: |
        Consulta para el login del usuario, buscando por su email y contraseña.  
        Se utiliza para verificar si existe un usuario con esos datos para poder iniciar sesión.
        
        **Nota**: Este endpoint está diseñado para comunicación entre microservicios y requiere de una API key válida.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: email
          in: query
          required: true
          description: El email del usuario que se quire recuperar
          schema:
            type: string
            example: "jlosada@gmail.com"
        - name: password
          in: query
          required: true
          description: La contraseña del usuario que se quiere recuperar
          schema:
            type: string
            example: "jyEfkri45"
            
      responses:
        '200':
          description: Autenticación existosa. Retorna los datos del usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileDTO'
              example:
                name: "jhon"
                surname: "brown"
                username: "jhon1342"
                email: "jhonbrown@gmail.com"
                password: "jdk1234*4"
        '400':
          description: Parámetros inválidos o faltantes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Bad request - Parámetros faltantes"
                message: "Los parámetros 'email, password y API_KEY' son requeridos"
                status: 400
                timestamp: "2025-10-06T18:29:00Z"
        '401':   
          description: Autenticación fallida - Credenciales inválidas o API key no autorizada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                invalidCredentials:
                  error: "Unauthorized"
                  message: "Credenciales no válidas"
                  statusCode: 401
                  timestamp: "2025-10-06T18:34:00Z"
                invalidApiKey:
                  error: "Unauthorized"
                  message: "API key inválida"
                  statusCode: 401
                  timestamp: "2025-10-06T18:36:00Z"
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Internal Server Error"
                message: "Error interno del servidor"
                statusCode: 500
                timestamp: "2025-10-06T18:41:00Z"

  /users/{public-id}:
    get:
      tags:
        - Usuarios
      summary: Obtiene los datos del usuario con el id solicitado
      description: |
        Consulta para verificar si ya existe un usuario con el mismo ID.
        Se utiliza para verificar la existencia de un usuario cuando se busca por su identificador único.
        
        **Nota**: Este endpoint está diseñado para comunicación entre microservicios  y requiere de una API key válida 
      security:
        - ApiKeyAuth: []
      parameters:
        - name: public-id
          in: path
          required: true
          description: El id del usuario que se quiere consultar
          schema:
            type: number
            example: 34
        
      responses:
        '200':
          description: Autenticación exitosa. Devuelve los datos del usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileDTO'
              example:
                name: "jhon"
                surname: "brown"
                username: "jhon1342"
                email: "jhonbrown@gmail.com"
                password: "jdk1234*4" 
        '400':
          description: Parámetros inválidos o faltantes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Bad request - Parámetros faltantes"
                message: "Los parámetros 'id, API_KEY' son requeridos"
                status: 400
                timestamp: "2025-10-07T07:34:00Z" 
        '401':   
          description: Autenticación fallida - Id inválido o API key no autorizada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                invalidCredentials:
                  error: "Unauthorized"
                  message: "Credenciales no válidas"
                  statusCode: 401
                  timestamp: "2025-10-07T07:34:00Z"
                invalidApiKey:
                  error: "Unauthorized"
                  message: "API key inválida"
                  statusCode: 401
                  timestamp: "2025-10-07T07:34:00Z"    
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Internal Server Error"
                message: "Error interno del servidor"
                statusCode: 500
                timestamp: "2025-10-07T07:35:00Z"                

  /users:
    get:
      tags:
        - Usuarios
      summary: Obtiene la información de los usuarios autenticados
      description: Recupera la información del usuario actualmente autentificado.
                  Requiere un token válido de verificación.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Se ha obtenido correctamente la información de los usuarios autenticados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileDTO'
    delete:
      tags:
        - Usuarios
      summary: Realiza un borrado lógico de un usuario autenticado
      description: Realiza un borrado lógico de un usuario autenticado junto con toda su información. El usuario y su información personal aparecen borrados pero no se han eliminado de manera física.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Usuario borrado de forma existosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessfulResponseDTO'
        '400':
          description: Mala petición - Usuario ya borrado o operación inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Bad Request"
                message: "Usuario ya borrado o operación inválida"
                statusCode: 400
                timestamp: "2025-10-01T11:55:00Z"
        '401':
          description: Sin autorizacion - No tienes permisos para borrar a un usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "unauthorized"
                message: "No tienes permitido borrar a un usuario"
                statusCode: 401
                timestamp: "2025-10-01T14:41:00"            
                
    patch:
      tags:
        - Usuarios
      summary: Actualiza los datos de un usuario autenticado
      description: |
        Permite al usuario autenticado actualizar su información personal.  
        Devuelve un objeto con el resultado de la operación.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDTO'
      responses:
        '200':  
          description: Se ha actualizado correctamente al usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessfulResponseDTO'
              example:
                successful: successful_user_update
                message: El usuario ha sido correctamente actualizado
                statusCode: 200
                timestamp: "2025-10-01T16:30:00Z"
        '500':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "InternalServerError"
                message: "Usuario no encontrado"
                statusCode: 500
                timestamp: "2025-10-01T16:30:00Z"
                
                
  /users/registro:
    post:
      tags:
        - Usuarios
      summary: Registrar un nuevo usuario en el sistema
      description: |
        Crea un nuevo usuario con los datos proporcionados.  
        Devuelve un objeto con la información del usuario registrado.  
        Lanza un error si el correo electrónico o el nombre de usuario ya existen.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterDTO'
      responses:
        '200':
          description: El usuario ha sido registrado correctamente en el sistema
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileDTO'
              example:
                  name: "jhon"
                  surname: "brown"
                  username: "jhon1342"
                  email: "jhonbrown@gmail.com"
                  password: "jdk1234*4"
        '400':
          description: Error en la petición (datos inválidos)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Bad Request"
                message: "La petición está mal formada"
                statusCode: 400
                timestamp: "2025-10-01T11:48:00Z"
        '409':
          description: El correo electrónico o el nombre del usuario ya están registrados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Conflict"
                message: "El usuario ya está registrado"
                statusCode: 409
                timestamp: "2025-10-01T11:50:00Z"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "InternalServerError"
                message: "Se ha producido un error al intentar cumplir la solicitud"
                timestamp: "2025-10-01T11:52:00Z"
          
  /users/login:
    post:
      tags:
        - Usuarios
      summary: Iniciar sesión de un usuario
      description: |
        Permite a un usuario iniciar sesión con su nombre de usuario y contraseñan.
        Devuelve el perfil del usuario si las credenciales son correctas, o un error 404 si no lo son.
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginDTO'
      responses:
        '200':
          description: Login correcto, devuelve la información del usuario
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileDTO'
              example:
                name: "jhon"
                surname: "brown"
                username: "jhon1342"
                email: "jhonbrown@gmail.com"
        '401':
          description: Credenciales incorrectas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                  error: "unauthorized"
                  message: "credenciales incorrectas"
                  statusCode: 401
                  timestamp: "2025-10-01T16:00:00Z"
            
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: X_API_Key
      in: header
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      
  schemas:
    UpdateUserDTO:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 50
          description: El nombre debe tener entre 2 y 50 caracteres
          example: "Joel"
        email:
          type: string
          description: El correo electrónico no debe estar en blanco
          example: "joelestrella@gmail.com"
        bio:
          type: string
          maxLength: 1000
          description: La biografía debe ocupar un máximo de 1000 caracteres
          example: "Software engeneer, trying to enjoy my free time with music."
        personalLink:
          type: string
          pattern: "^(https?://)?([\\w.-]+)+(:\\d+)?(/([\\w/_.]*)?)?$"
          description: El link personal debe de ser un link válido
          example: "http://linkedin.com/joel-estrella02212"
        birthday:
          type: string
          format: date
          description: El año de nacimiento debe de ser una fecha pasada
          example: "2004-06-11"
        phone:
          type: string
          pattern: "(\\+34|0034|34)?[ -]*(6|7)[ -]*([0-9][ -]*){8}?$"
          example: "+34 927304576" 
          
          
    UserLoginDTO:
      type: object
      properties:
        email:
          type: string
          example: "jhonbrown@gmail.com"
        password:
          type: string
          example: "jdk1234*4"
          
    UserRegisterDTO:
      type: object
      properties:
        name:
          type: string
          example: "jhon"
        surname:
          type: string
          example: "brown"
        username:
          type: string
          example: "jhon1342"
        email:
          type: string
          example: "jhonbrown@gmail.com"
        password:
          type: string
          example: "jdk1234*4"
          
    UserProfileDTO:
      type: object
      properties:
        username:
          type: string
          example: "juanM12"
        name:  
          type: string
          example: "Juan"
        surname:
          type: string
          example: "Losada Lago"
        email:
          type: string
          example: "losada@gmail.com"
        personalLink:
          type: string
          example: "http://www.linkedin.com/in/juan-losada-344344/"
        birthday:
          type: string
          example: "12-04-2004"
          
    ArtistFormDTO:
      type: object
      required:
        - artistName
        - iban
        - accountPropietary
        - description
      properties:
        artistName:
          type: string
          minLength: 2
          maxLength: 100
          example: "WILYWNKA"
          description: El nombre del artista debe tener entre 2 y 100 caracteres
        iban:
          type: string
          pattern: "^[A-Z]{2}\\d{2}[A-Z0-9]{1,30}$"
          example: "ES7921000813610123456789"
          description: El iban no debe estar vacío
        accountPropietary:
          type: string
          minLength: 2
          maxLength: 100
          example: "Company EPSILON"
          description: El propietario de la cuenta debe tener entre 2 y 100 caracteres
        description:
          type: string
          minLength: 10
          maxLength: 1000
          example: "WILYWNKA es un cantante de género RAP|J_POP ...."
          description: La descripción no debe de ser vacía
    
    SuccessfulResponseDTO:
      type: object
      properties:
        successful:
          type: string
          example: "successful_artist_update"
        message:
          type: string
          example: "El artista ha sido actualizado correctamente"
        statusCode: 
          type: integer
          example: 200
        timestamp:
          type: string
          example: "01/10/2025 13:13:00"
    
    ErrorResponse:
      type: object
      properties:
        error: 
          type: string
          description: Código corto de error
          example: "unauthorized"
        message:
          type: string
          description: Mensaje descriptivo del error
          example: "Debes iniciar sesión para poder acceder a este recurso"
        statusCode:
          type: integer
          description: Código HTTP asociado al error
          example: 401
        timestamp:
          type: string
          format: date-time
          description: Hora en la que se ha producido el error
          example: "2025-10-01T16:30:00Z"
          
    UpdateArtistDTO:
      type: object
      required:
        - artisticName
        - description
        - iban
        - accountProperty
        - genres
        - socialMediaLinks
      properties:
        artisticName:
          type: string
          minLength: 2
          maxLength: 100
          example: "Mathew PJ"
          description: El nombre artístico no debe estar en blanco (entre 2 y 100 caracteres)
        description:
          type: string
          minLength: 10
          maxLength: 1000
          example: "Músico especializado en jazz y soul."
          description: La describición no debe estar en blanco (entre 10 y 1000 caracteres)
        iban:
          type: string
          pattern: "^[A-Z]{2}\\d{2}[A-Z0-9]{1,30}$"
          example: "ES7921000813610123456789"
          description: El formato del iban debe de ser válido
        genres:
          type: array
          minItems: 1
          maxItems: 4
          items:
            $ref: '#/components/schemas/GenreType'
          example: [ROCK, JAZZ]  
          description: Debes proprocionar entre 1 y 4 géneros distintos
        socialMediaLinks:
          type: array
          minItems: 1
          maxItems: 4
          items:
            $ref: '#/components/schemas/SocialMediaLinks'
          example:
            - id: 1
              type: SPOTIFY
            - id: 2
              type: INSTAGRAM
          description: Debes proporcionar entre 1 y 4 enlaces a tus redes sociales.  
        
    SentArtistDTO:
      type: object
      properties:
        artistId:
          type: number
          example: 100
        username:
          type: string
          example: "torauma@111"
        artisticName:
          type: string
          example: "TORAUMA"
        description:
          type: string
          example: "Cantante inigualable que promueve el género Hip-Hop | Rap moderno en Japón"
        isTrending:
          type: boolean
          example: true
        verified:
          type: boolean
          example: true
        socialMediaLinks:
          type: array
          items:
            $ref: '#/components/schemas/SocialMediaLinks'
        monthlyStreams:
          type: number
          example: 4
        genres:  
          type: array
          items:
            $ref: '#/components/schemas/Genre'
            
    ArtistPayementInfoDTO:
      type: object
      properties:
        username:
          type: string
          example: "4"
        totalBalance:
          type: number
          example: 1030.0
        thisMonth:
          type: number
          example: 444.4
        iban:
          type: string
          example: "ES9121000418450200051332"
        accountPropietary:
          type: string
          example: "jason the wheen"
        balance:
          type: array
          items:
            $ref: '#/components/schemas/BalanceDTO'
        status:
          type: array
          items:
            $ref: '#/components/schemas/PaymentDTO'
            
    PaymentDTO:
      type: object
      properties:
        id:
          type: number
          example: 1
        artistId:
          type: number
          example: 4
        artistName:
          type: string
          example: "jason"
        concept:
          type: string
          example: "Compra de canción"
        paymentDate:
          type: string
          example: "12-09-2025"
        amount:
          type: number
          example: 2
        paymentMethod:
          type: array
          items:
            $ref: '#/components/schemas/PaymentMethod'
        status:
          type: array
          items:
            $ref: '#/components/schemas/PaymentStatus'
            
    PaymentStatus:
      type: string
      enum: 
        - PENDIENTE
        - COMPLETADO
        - FALLADO
            
    PaymentMethod:
      type: string
      enum:
        - TRANSFERENCIA
        - PAYPAL
        - TARJETA_CREDITO
        - EFECTIVO
        - OTRO
    
    BalanceDTO:
      type: object
      properties:
        id:
          type: number
          example: 30
        artistId:
          type: number
          example: 4
        monthlyBalance:
          type: number
          example: 1030.0
        balanceDate:
          type: string
          example: "30-09-2025"
        status:
          $ref: '#/components/schemas/BalanceStatus'
          
    BalanceStatus:
      type: string
      enum:
        - PENDIENTE
        - PAGADO
        - RECHAZADO
          
    PageSentArtistDTO:
      type: object
      description: Representación de una página de resultados de artistas
      properties:
        content:
          type: array
          items: 
            $ref: '#/components/schemas/SentArtistDTO'
            
    SocialMediaLinks:
      type: object
      properties:
        id:
          type: number
          example: 1
        type:
          $ref: '#/components/schemas/SocialMediaTypes'
      required:
        - id
        - type
      example:
        id: 1
        type: SPOTIFY
          
    SocialMediaTypes:
      type: string
      enum:
        - INSTAGRAM
        - SPOTIFY
        - FACEBOOK
        - GITHUB
        - YOUTUBE
        - SOUNDCLOUD
        - CUENTA_UNEX
          
    Genre:
      type: object
      properties:
        id:
          type: number
          example: 4
        type:
          $ref: '#/components/schemas/GenreType'
      required:
        - id
        - type
      example: 
        id: 4
        type: J_POP, RAP, HIP_HOP
          
    GenreType:
      type: string
      enum:
        - HIP_HOP
        - RAP
        - TRAP
        - RNB
        - POP
        - ROCK
        - ALTERNATIVE_ROCK
        - HARD_ROCK
        - PUNK_ROCK
        - METAL
        - HEAVY_METAL
        - TRASH_METAL
        - INDIE
        - INDIE_ROCK
        - INDIE_POP
        - ELECTRONIC
        - EDM
        - HOUSE
        - TECHNO
        - TRANCE
        - DUBSTEP
        - DRUM_AND_BASS
        - JAZZ
        - BLUES
        - FUNK
        - SOUL
        - CLASSICAL
        - REGGAE
        - REGGAETON
        - SALSA
        - BACHATA
        - CUMBIA
        - FLAMENCO
        - FOLK
        - COUNTRY
        - LATIN
        - AFROBEAT
        - K_POP
        - J_POP
        - LOFI
        - AMBIENT
        - EXPERIMENTAL
        - INSTRUMENTAL
        - ACOUSTIC
        - SOUNDTRACK
        - GOSPEL
        - OPERA
        - DANCEHALL
        - DISCO
        - GRIME
        - DRILL
        - PHONK
        - CHILLWAVE
        - SYNTHWAVE
        - NEW_WAVE